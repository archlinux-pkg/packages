name: Packages

on:
  push:
    branches:
      - main
    paths:
      - 'packages/**'

  pull_request:
    paths:
      - 'packages/**'

  workflow_dispatch:
    inputs:
      packages:
        description: "A space-separated names of packages selected for rebuilding"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1000
          submodules: true

      - name: Prepare Build
        run: |
          ./.github/scripts/prepare.sh

          if [ -f ./built_packages.txt ]
          then
            printf "\n\n\nPackages to build:\n"
            cat --number built_packages.txt
          fi
          if [ -f ./deleted_packages.txt ]
          then
            printf "\n\n\nPackages to delete:\n"
            cat --number deleted_packages.txt
          fi
        env:
          github_event: ${{ github.event_name }}
          github_inputs_packages: ${{ github.event.inputs.packages }}

      - name: Build
        run: |
          echo "Free additional disk space on host..."
          sudo rm -rf \
            /opt/hostedtoolcache \
            /usr/share/dotnet \
            /usr/share/swift \
            /usr/local/lib/android
          echo "Done!"

          if [ -f ./built_packages.txt ]
          then
            sudo docker run \
              --name $CONTAINER_NAME \
              --volume $(pwd):/home/archlinux-pkg \
              medzik/archlinux:latest \
              /home/archlinux-pkg/.github/scripts/entrypoint.sh
          fi
        env:
          github_event: ${{ github.event_name }}
          github_inputs_packages: ${{ github.event.inputs.packages }}

      - name: Packages
        if: always()
        run: |
          printf "Packages:\n"
          ls -lah pkgs/*.xz

          printf "\n\nPackages Size:\n"
          xz -l pkgs/*.xz

      - name: Upload to Repo
        if: always() && github.event_name != 'pull_request'
        env:
          HTTP_PASSWORD: ${{ secrets.HTTP_PASSWORD }}
          HTTP_USER: ${{ secrets.HTTP_USER }}
          HTTP_URL: ${{ secrets.HTTP_URL }}
        run: |
          upload() {
            local file="$1"

            for ((i = 0 ; i <= 10 ; i++))
            do
              curl \
                -silent \
                --retry 2 \
                --retry-delay 3 \
                --user "$HTTP_USER:$HTTP_PASSWORD" \
                -F "path=@$file" \
                "$HTTP_URL/upload?path=/"

              exit_code=$?
              echo "$file | exit code = $exit_code"

              if ! (( $exit_code ))
              then
                break
              else
                sleep 5
              fi
            done
          }

          for file in pkgs/*.pkg.tar*
          do
            upload $file
          done
