name: Build

on:
  push:
    branches:
      - main
    paths:
      - 'packages/**'

  pull_request:
    paths:
      - 'packages/**'

  workflow_dispatch:
    inputs:
      packages:
        description: "A space-separated names of packages selected for rebuilding"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1000

      - name: Prepare Build
        env:
          github_event: ${{ github.event_name }}
          github_inputs_packages: ${{ github.event.inputs.packages }}
        run: |
          ./.github/scripts/build/prepare.sh

          if [ -f ./built_packages.txt ]
          then
            printf "\nPackages to build:\n"
            cat --number built_packages.txt
          fi

          if [ -f ./deleted_packages.txt ]
          then
            printf "\nPackages to delete:\n"
            cat --number deleted_packages.txt
          fi

      - name: Disk size before build
        run: df -h

      - name: Build
        if: always()
        env:
          github_event: ${{ github.event_name }}
          github_inputs_packages: ${{ github.event.inputs.packages }}
        run: |
          if [ -f ./built_packages.txt ]
          then
            ./.github/scripts/build/build.sh
          fi

      - name: Disk size after build
        run: df -h

      - name: Packages
        if: always()
        run: |
          if [ -f ./built_packages.txt ]
          then
            printf "\n\nPackages Size:\n"
            xz -l ./pkgs/*.xz
          fi

      - name: Update file names
        if: always() && github.event_name != 'pull_request'
        run: |
          cd pkgs

          sudo chown -R $(whoami) .

          for file in *.pkg.tar*
          do
            new_filename="${file//:/_}"

            if [ "$file" != "$new_filename" ]
            then
              mv "$file" "$new_filename"
            fi
          done

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ./pkgs

  upload:
    if: github.event_name != 'pull_request' && always()
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1000

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: Import GPG key
        if: always() && github.event_name != 'pull_request'
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_SECRET }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sign packages
        if: always() && github.event_name != 'pull_request'
        run: |
          mkdir pkgs
          mv *.pkg.tar* pkgs/

          for file in ./pkgs/*.pkg.tar*
          do
            gpg --detach-sign --use-agent --default-key 7A6646A6C14690C0 --batch --yes "$file"
          done

      - name: Upload packages
        if: always() && github.event_name != 'pull_request'
        env:
          FTP_URI: ${{ secrets.FTP_URI }}
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_CWD: ${{ secrets.FTP_CWD }}
        run: |
          ./.github/scripts/upload.sh
